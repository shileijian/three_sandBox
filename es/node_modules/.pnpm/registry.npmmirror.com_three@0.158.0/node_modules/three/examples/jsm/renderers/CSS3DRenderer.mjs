import { Vector3 as M, Quaternion as $, Matrix4 as _, Object3D as A } from "../../../build/three.module.mjs";
const O = new M(), H = new $(), W = new M();
class N extends A {
  constructor(i = document.createElement("div")) {
    super(), this.isCSS3DObject = !0, this.element = i, this.element.style.position = "absolute", this.element.style.pointerEvents = "auto", this.element.style.userSelect = "none", this.element.setAttribute("draggable", !1), this.addEventListener("removed", function() {
      this.traverse(function(s) {
        s.element instanceof Element && s.element.parentNode !== null && s.element.parentNode.removeChild(s.element);
      });
    });
  }
  copy(i, s) {
    return super.copy(i, s), this.element = i.element.cloneNode(!0), this;
  }
}
class b extends N {
  constructor(i) {
    super(i), this.isCSS3DSprite = !0, this.rotation2D = 0;
  }
  copy(i, s) {
    return super.copy(i, s), this.rotation2D = i.rotation2D, this;
  }
}
const o = new _(), R = new _();
class k {
  constructor(i = {}) {
    const s = this;
    let m, c, g, y;
    const x = {
      camera: { style: "" },
      objects: /* @__PURE__ */ new WeakMap()
    }, a = i.element !== void 0 ? i.element : document.createElement("div");
    a.style.overflow = "hidden", this.domElement = a;
    const d = document.createElement("div");
    d.style.transformOrigin = "0 0", d.style.pointerEvents = "none", a.appendChild(d);
    const h = document.createElement("div");
    h.style.transformStyle = "preserve-3d", d.appendChild(h), this.getSize = function() {
      return {
        width: m,
        height: c
      };
    }, this.render = function(n, e) {
      const l = e.projectionMatrix.elements[5] * y;
      e.view && e.view.enabled ? (d.style.transform = `translate( ${-e.view.offsetX * (m / e.view.width)}px, ${-e.view.offsetY * (c / e.view.height)}px )`, d.style.transform += `scale( ${e.view.fullWidth / e.view.width}, ${e.view.fullHeight / e.view.height} )`) : d.style.transform = "", n.matrixWorldAutoUpdate === !0 && n.updateMatrixWorld(), e.parent === null && e.matrixWorldAutoUpdate === !0 && e.updateMatrixWorld();
      let v, p;
      e.isOrthographicCamera && (v = -(e.right + e.left) / 2, p = (e.top + e.bottom) / 2);
      const r = e.view && e.view.enabled ? e.view.height / e.view.fullHeight : 1, f = e.isOrthographicCamera ? `scale( ${r} )scale(` + l + ")translate(" + t(v) + "px," + t(p) + "px)" + C(e.matrixWorldInverse) : `scale( ${r} )translateZ(` + l + "px)" + C(e.matrixWorldInverse), u = (e.isPerspectiveCamera ? "perspective(" + l + "px) " : "") + f + "translate(" + g + "px," + y + "px)";
      x.camera.style !== u && (h.style.transform = u, x.camera.style = u), E(n, n, e);
    }, this.setSize = function(n, e) {
      m = n, c = e, g = m / 2, y = c / 2, a.style.width = n + "px", a.style.height = e + "px", d.style.width = n + "px", d.style.height = e + "px", h.style.width = n + "px", h.style.height = e + "px";
    };
    function t(n) {
      return Math.abs(n) < 1e-10 ? 0 : n;
    }
    function C(n) {
      const e = n.elements;
      return "matrix3d(" + t(e[0]) + "," + t(-e[1]) + "," + t(e[2]) + "," + t(e[3]) + "," + t(e[4]) + "," + t(-e[5]) + "," + t(e[6]) + "," + t(e[7]) + "," + t(e[8]) + "," + t(-e[9]) + "," + t(e[10]) + "," + t(e[11]) + "," + t(e[12]) + "," + t(-e[13]) + "," + t(e[14]) + "," + t(e[15]) + ")";
    }
    function D(n) {
      const e = n.elements;
      return "translate(-50%,-50%)" + ("matrix3d(" + t(e[0]) + "," + t(e[1]) + "," + t(e[2]) + "," + t(e[3]) + "," + t(-e[4]) + "," + t(-e[5]) + "," + t(-e[6]) + "," + t(-e[7]) + "," + t(e[8]) + "," + t(e[9]) + "," + t(e[10]) + "," + t(e[11]) + "," + t(e[12]) + "," + t(e[13]) + "," + t(e[14]) + "," + t(e[15]) + ")");
    }
    function E(n, e, l, v) {
      if (n.isCSS3DObject) {
        const p = n.visible === !0 && n.layers.test(l.layers) === !0;
        if (n.element.style.display = p === !0 ? "" : "none", p === !0) {
          n.onBeforeRender(s, e, l);
          let r;
          n.isCSS3DSprite ? (o.copy(l.matrixWorldInverse), o.transpose(), n.rotation2D !== 0 && o.multiply(R.makeRotationZ(n.rotation2D)), n.matrixWorld.decompose(O, H, W), o.setPosition(O), o.scale(W), o.elements[3] = 0, o.elements[7] = 0, o.elements[11] = 0, o.elements[15] = 1, r = D(o)) : r = D(n.matrixWorld);
          const f = n.element, S = x.objects.get(n);
          if (S === void 0 || S.style !== r) {
            f.style.transform = r;
            const u = { style: r };
            x.objects.set(n, u);
          }
          f.parentNode !== h && h.appendChild(f), n.onAfterRender(s, e, l);
        }
      }
      for (let p = 0, r = n.children.length; p < r; p++)
        E(n.children[p], e, l);
    }
  }
}
export {
  N as CSS3DObject,
  k as CSS3DRenderer,
  b as CSS3DSprite
};
